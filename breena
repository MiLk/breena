#!/usr/bin/perl
# could be helpful:
# http://poe.perl.org/?POE_Cookbook/IRC_Bots
# http://poe.perl.org/?POE_Cookbook/IRC_Bot_Debugging
# http://poe.perl.org/?POE_Cookbook/IRC_Bot_Disconnecting
# http://poe.perl.org/?POE_Cookbook/IRC_Bot_Reconnecting

use warnings;
use strict;
use POSIX qw(strftime);
use POE;
use POE::Component::IRC;
use Time::HiRes qw(time);
use Config::Simple;
use Data::Dumper;

my ($dirpath) = (__FILE__ =~ m{^(.*/)?.*}s);
my $conf_file = "${dirpath}breena.conf";

my $conf = new Config::Simple("$conf_file") or die "impossible de trouver $conf_file";
my $conf_nick = $conf->param("nick");
my $conf_nickserv = $conf->param("nickserv");
my $conf_server = $conf->param("server");
my $conf_channel = $conf->param("channel");
my $conf_debug = $conf->param("debug");

my @db_timers;

sub CHANNEL () { "$conf_channel" }

my ($irc) = POE::Component::IRC->spawn();

POE::Session->create(
  inline_states => {
    _start		=> \&bot_start,
    connect		=> \&bot_connect,
    irc_001		=> \&on_connect,
    irc_public		=> \&on_public,
    irc_ctcp_action	=> \&on_ctcp_action,
    irc_quit		=> \&on_quit,
    irc_disconnected	=> \&bot_reconnect,
    bot_timer		=> \&bot_timer,
  },
);

sub bot_connect {
  $irc->yield(register => "all");
  $irc->yield(
    connect => {
      Nick     => "$conf_nick",
      Username => "$conf_nick",
      Ircname  => 'POE::Component::IRC (Perl)',
      Server   => "$conf_server",
      Port     => '6667',
      debug    => "$conf_debug",
    }
  );
}

sub bot_start {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  $kernel->yield("connect");
}

sub on_connect {
  $irc->yield(privmsg => 'nickserv' => "identify $conf_nickserv");
  $irc->yield(join => CHANNEL);
  $irc->delay([ mode => $conf_channel => '-a' => $conf_nick ], 2);
}

sub bot_reconnect {
  my ($kernel, $heap) = @_[KERNEL, HEAP];
  $kernel->delay(connect => 60);
}

sub on_ctcp_action {
  my ($sender, $who, $where, $what) = @_[SENDER, ARG0 .. ARG2];
  my $nick = ( split /!/, $who )[0];
  my $channel = $where->[0];
  if($what =~ /^(.*)$conf_nick(.*)$/) {
    $irc->yield(ctcp => $channel => "ACTION $1$nick$2");
  }
  return;
}

sub on_quit {
  my ($kernel, $who, $msg) = @_[KERNEL, ARG0, ARG1];
  my $nick    = (split /!/, $who)[0];
  my $ts      = scalar localtime;
  if (($msg =~ /^Ping timeout$/) && ($nick eq 'Christina')) {
    $irc->yield(privmsg => "$conf_channel" => "hihihi");
  }
}

sub bot_timer {
  $irc->yield(privmsg => "$conf_channel" => "$_[ARG1]: DING!$_[ARG0]")
}

sub on_public {
  my ($kernel, $who, $where, $msg) = @_[KERNEL, ARG0, ARG1, ARG2];
  my $nick    = (split /!/, $who)[0];
  my $channel = $where->[0];
  my $ts      = scalar localtime;

  if ($msg =~ /^$conf_nick.*danse$/) {
    $irc->yield(ctcp => $channel => "ACTION danse.");
  }

  if ($msg =~ /^time .*/) {
    $irc->yield(privmsg => $channel => "only \".time curitiba\" is available");
  }

  if ($msg =~ /^\.time curitiba$/) {
    my $now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime(time-10800);
    $irc->yield(privmsg => $channel => "$now_string");
  }

  if ($msg =~ /^\.conj.*? (.*)/) {
    $irc->yield(privmsg => $channel => "http://www.vatefaireconjuguer.com/search?verb=$1");
  }

  if ($msg =~ /^t (\d*)(.*)$/) {
    $irc->yield(privmsg => $channel => "[timer added]$2 ($1 seconds)");
    $_[KERNEL]->delay_add(bot_timer => $1, $2, $nick);
  }

  if ($msg =~ /^\.anglais (.*)/) {
    $irc->yield(privmsg => $channel => "http://www.anglais-conjugaison.com/search?verb=$1");
  }
}

$poe_kernel->run();
exit 0;
